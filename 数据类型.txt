在 C# 中，变量分为以下几种类型：

    值类型（Value types）
    引用类型（Reference types）
    指针类型（Pointer types）
    
值类型（Value types）
    值类型变量可以直接分配给一个值。它们是从类 System.ValueType 中派生的。

    如需得到一个类型或一个变量在特定平台上的准确尺寸，可以使用 sizeof 方法
    值类型直接包含数据。比如 int、char、float，它们分别存储数字、字母、浮点数。当您声明一个 int 类型时，系统分配内存来存储值。
    下表列出了 C# 2010 中可用的值类型：
    bool	布尔值	True 或 False	False
    byte	8 位无符号整数	0 到 255	0
    char	16 位 Unicode 字符	U +0000 到 U +ffff	''
    decimal	128 位精确的十进制值，28-29 有效位数	(-7.9 x 1028 到 7.9 x 1028) / 100 到 28	0.0M
    double	64 位双精度浮点型	(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308	0.0D
    float	32 位单精度浮点型	-3.4 x 1038 到 + 3.4 x 1038	0.0F
    int	32 位有符号整数类型	-2,147,483,648 到 2,147,483,647	0
    long	64 位有符号整数类型	-923,372,036,854,775,808 到 9,223,372,036,854,775,807	0L
    sbyte	8 位有符号整数类型	-128 到 127	0
    short	16 位有符号整数类型	-32,768 到 32,767	0
    uint	32 位无符号整数类型	0 到 4,294,967,295	0
    ulong	64 位无符号整数类型	0 到 18,446,744,073,709,551,615	0
    ushort	16 位无符号整数类型	0 到 65,535	0

引用类型（Reference types）
    引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。
    换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。内置的 引用类型有：object、dynamic 和 string。
    当一个值类型转换为对象类型时，则被称为 装箱；另一方面，当一个对象类型转换为值类型时，则被称为 拆箱。
    
    对象（Object）类型
        对象（Object）类型 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。
        Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。
    
    动态（Dynamic）类型
        您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。
        声明动态类型的语法：  dynamic <variable_name> = value;
    
    字符串（String）类型
        字符串（String）类型 允许您给变量分配任何字符串值。
        字符串（String）类型是 System.String 类的别名。
        它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。
            String str = "w3cschool.cn";
            @"w3cschool.cn";
            
            string str = @"C:\Windows"; 等价于 string str = "C:\\Windows";
            
指针类型（Pointer types）
    指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。
    声明指针类型的语法：    type* identifier;
    
类型转换
       类型转换从根本上说是类型铸造，或者说是把数据从一种类型转换为另一种类型。在 C# 中，类型铸造有两种形式：
            隐式类型转换 - 这些转换是 C# 默认的以安全方式进行的转换。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。
            显式类型转换 - 这些转换是通过用户使用预定义的函数显式完成的。显式转换需要强制转换运算符。
       
       C# 提供了下列内置的类型转换方法：
            ToBoolean    如果可能的话，把类型转换为布尔型。
            ToByte       把类型转换为字节类型。
            ToChar       如果可能的话，把类型转换为单个 Unicode 字符类型。
            ToDateTime   把类型（整数或字符串类型）转换为 日期-时间 结构。
            ToDecimal    把浮点型或整数类型转换为十进制类型。
            ToDouble     把类型转换为双精度浮点型。
            ToInt16      把类型转换为 16 位整数类型。
            ToInt32      把类型转换为 32 位整数类型。
            ToInt64      把类型转换为 64 位整数类型。
            ToSbyte      把类型转换为有符号字节类型。
            ToSingle     把类型转换为小浮点数类型。
            ToString     把类型转换为字符串类型。
            ToType       把类型转换为指定类型。
            ToUInt16     把类型转换为 16 位无符号整数类型。
            ToUInt32     把类型转换为 32 位无符号整数类型。
            ToUInt64     把类型转换为 64 位无符号整数类型。
       
关于变量
    整数类型	sbyte、byte、short、ushort、int、uint、long、ulong 和 char
    浮点型	float 和 double
    十进制类型	decimal
    布尔类型	true 或 false 值，指定的值
    空类型	可为空值的数据类型
    
    C# 中变量定义的语法：
        <data_type> <variable_list>;
        int i, j, k;
        char c, ch;
        float f, salary;
        double d;
        
    变量初始化：
        variable_name = value;
        
        变量可以在声明时被初始化（指定一个初始值）。初始化由一个等号后跟一个常量表达式组成，如下所示：
        <data_type> <variable_name> = value;
        例：
            int d = 3, f = 5;    /* 初始化 d 和 f. */
            byte z = 22;         /* 初始化 z. */
            double pi = 3.14159; /* 声明 pi 的近似值 */
            char x = 'x';        /* 变量 x 的值为 'x' */

C# 中的 Lvalues 和 Rvalues
    C# 中的两种表达式：
    lvalue：lvalue 表达式可以出现在赋值语句的左边或右边。
    rvalue：rvalue 表达式可以出现在赋值语句的右边，不能出现在赋值语句的左边。 